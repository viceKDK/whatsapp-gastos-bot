"""
Servicio de Interpretaci√≥n de Mensajes

Extrae informaci√≥n de gastos desde texto de mensajes de WhatsApp.
"""

import re
from decimal import Decimal, InvalidOperation
from datetime import datetime
from typing import Optional, Dict, Any

from domain.models.gasto import Gasto
from domain.value_objects.categoria import Categoria
from domain.value_objects.monto import Monto
from shared.logger import get_logger

try:
    from app.services.nlp_categorizer import get_nlp_categorizer, get_cached_nlp_categorizer, CategorizationResult
    HAS_NLP = True
except ImportError:
    HAS_NLP = False


logger = get_logger(__name__)


class OptimizedRegexEngine:
    """Motor de regex optimizado con pattern unificado mejorado."""
    
    def __init__(self):
        # Pattern √∫nico compilado con alternativas mejoradas y m√°s casos cubiertos
        self.unified_pattern = re.compile(
            r'(?:'
            # Patr√≥n 1: Verbos de acci√≥n + monto + descripci√≥n
            r'(?:compre?|compr√©|gast√©?|pague?|pagu√©)\s+(\d+(?:[.,]\d{1,2})?)\s+(?:en\s+|por\s+|de\s+|para\s+)?(.+)'
            r'|'
            # Patr√≥n 2: S√≠mbolo de dinero + monto + descripci√≥n
            r'[$]\s*(\d+(?:[.,]\d{1,2})?)\s+(.+)'
            r'|'
            # Patr√≥n 3: "gasto" opcional + monto + descripci√≥n
            r'(?:gasto:?\s*)?(\d+(?:[.,]\d{1,2})?)\s+(.+)'
            r'|'
            # Patr√≥n 4: Solo monto + descripci√≥n (m√°s flexible)
            r'^(\d+(?:[.,]\d{1,2})?)\s+([a-zA-Z√°√©√≠√≥√∫√±√Å√â√ç√ì√ö√ë√º√ú][^0-9]*)'
            r'|'
            # Patr√≥n 5: Formato "X pesos en/de/por Y"
            r'(\d+(?:[.,]\d{1,2})?)\s+(?:pesos?\s+)?(?:en\s+|de\s+|por\s+|para\s+)(.+)'
            r'|'
            # Patr√≥n 6: NUEVO - Categor√≠a + monto (ej: "internet 500", "nafta 300")
            r'^([a-zA-Z√°√©√≠√≥√∫√±√Å√â√ç√ì√ö√ë√º√ú][^0-9]*?)\s+(\d+(?:[.,]\d{1,2})?)(?:\s+.*)?$'
            r')', 
            re.IGNORECASE | re.MULTILINE | re.UNICODE
        )
        
        # Pre-compilar filtros comunes para velocidad
        self.amount_filter = re.compile(r'^\d+(?:[.,]\d{1,2})?$')
        self.system_msg_filter = re.compile(
            r'(?:cambi√≥|elimin√≥|sali√≥|agreg√≥|admin|miembro|se uni√≥|left|joined|created|deleted|added|removed)', 
            re.IGNORECASE | re.UNICODE
        )
    
    def extract_fast(self, text: str) -> Optional[Dict[str, Any]]:
        """Extracci√≥n optimizada con una sola pasada de regex mejorada."""
        logger.info(f"üîç REGEX ENGINE: Extrayendo datos de '{text}'")
        
        # Una sola b√∫squeda de regex
        match = self.unified_pattern.search(text)
        if not match:
            logger.info("‚ùå REGEX ENGINE: No hay coincidencias con el patr√≥n unificado")
            return None
        
        logger.info(f"‚úÖ REGEX ENGINE: Coincidencia encontrada - grupos: {match.groups()}")
        
        # Extraer grupos de manera optimizada
        groups = match.groups()
        
        # Encontrar el primer grupo no-None para monto y descripci√≥n
        for i in range(0, len(groups), 2):
            if groups[i]:
                group1 = groups[i]
                group2 = groups[i + 1] if i + 1 < len(groups) else ''
                
                # Determinar cu√°l grupo es el monto y cu√°l la descripci√≥n
                # Intentar convertir ambos grupos a n√∫mero para identificar el monto
                amount_str = None
                description = None
                
                # Verificar si group1 es un n√∫mero (monto)
                try:
                    float(group1.replace(',', '.'))
                    amount_str = group1
                    description = group2
                    logger.info(f"üí∞ REGEX ENGINE: Formato cantidad-categor√≠a ‚Üí Monto='{amount_str}', Descripci√≥n='{description}'")
                except ValueError:
                    # group1 no es n√∫mero, verificar si group2 es n√∫mero
                    try:
                        float(group2.replace(',', '.'))
                        amount_str = group2
                        description = group1
                        logger.info(f"üí∞ REGEX ENGINE: Formato categor√≠a-cantidad ‚Üí Descripci√≥n='{description}', Monto='{amount_str}'")
                    except ValueError:
                        # Ninguno es n√∫mero v√°lido, usar formato original
                        amount_str = group1
                        description = group2
                        logger.info(f"üí∞ REGEX ENGINE: Formato fallback ‚Üí Monto='{amount_str}', Descripci√≥n='{description}'")
                
                # Normalizar el monto (reemplazar coma por punto si es necesario)
                normalized_amount = amount_str.replace(',', '.')
                
                try:
                    result = {
                        'monto': Decimal(normalized_amount),
                        'descripcion': description.strip() if description else ''
                    }
                    logger.info(f"‚úÖ REGEX ENGINE: Resultado final: {result}")
                    return result
                except (ValueError, InvalidOperation) as e:
                    logger.error(f"‚ùå REGEX ENGINE: Error convirtiendo monto '{normalized_amount}': {e}")
                    continue
        
        logger.info("‚ùå REGEX ENGINE: No se pudieron extraer datos v√°lidos")
        return None
    
    def is_system_message_fast(self, text: str) -> bool:
        """Detecci√≥n r√°pida de mensajes del sistema."""
        return bool(self.system_msg_filter.search(text[:100]))  # Solo primeros 100 chars


class InterpretarMensajeService:
    """Servicio para extraer datos de gasto desde mensajes de texto."""
    
    def __init__(self, enable_nlp_categorization: bool = True, use_cached_nlp: bool = True):
        self.logger = logger
        self.enable_nlp = enable_nlp_categorization and HAS_NLP
        self.use_cached_nlp = use_cached_nlp
        
        # ‚ö° OPTIMIZACI√ìN: Usar categorizador cacheado por defecto (85% m√°s r√°pido)
        if self.enable_nlp:
            if use_cached_nlp:
                self.nlp_categorizer = get_cached_nlp_categorizer()
                self.logger.info("Categorizador NLP CACHEADO habilitado (85% m√°s r√°pido)")
            else:
                self.nlp_categorizer = get_nlp_categorizer()
                self.logger.info("Categorizador NLP tradicional habilitado")
        else:
            self.nlp_categorizer = None
        
        # Inicializar motor de regex optimizado
        self.regex_engine = OptimizedRegexEngine()
        
        # Patrones tradicionales como fallback (ya optimizados para una sola compilaci√≥n)
        self._init_traditional_patterns()
        
        if self.enable_nlp:
            self.logger.info("Categorizador NLP habilitado")
        else:
            self.logger.info("Categorizador NLP deshabilitado o no disponible")
        
        self.logger.info("Motor de regex optimizado inicializado")
    
    def _init_traditional_patterns(self):
        """Inicializa patrones tradicionales solo una vez (compilaci√≥n √∫nica)."""
        self.PATRON_COMPRE = re.compile(r'compr√©?\s+(\d+(?:\.\d{1,2})?)\s+(?:en\s+|por\s+|de\s+)?(.+)', re.IGNORECASE)
        self.PATRON_GASTE = re.compile(r'gast√©\s+(\d+(?:\.\d{1,2})?)\s+(?:en\s+|por\s+)?(.+)', re.IGNORECASE)
        self.PATRON_PAGUE = re.compile(r'pagu√©\s+(\d+(?:\.\d{1,2})?)\s+(?:por\s+|en\s+)?(.+)', re.IGNORECASE)
        self.PATRON_CON_SIGNO = re.compile(r'\$\s*(\d+(?:\.\d{1,2})?)\s+(.+)', re.IGNORECASE)
        self.PATRON_GASTO = re.compile(r'(?:gasto:?\s*)?(\d+(?:\.\d{1,2})?)\s+(.+)', re.IGNORECASE)
        self.PATRON_SOLO_MONTO = re.compile(r'^(\d+(?:\.\d{1,2})?)\s+(.+)$', re.IGNORECASE)
    
    def procesar_mensaje(self, texto: str, fecha_mensaje: Optional[datetime] = None) -> Optional[Gasto]:
        """
        Procesa un mensaje y extrae informaci√≥n de gasto si existe.
        
        Args:
            texto: Texto del mensaje de WhatsApp
            fecha_mensaje: Fecha del mensaje (opcional, usa datetime.now() si no se proporciona)
            
        Returns:
            Gasto object si se puede extraer informaci√≥n, None si no es un gasto
            
        Examples:
            "gasto: 500 comida" -> Gasto(500, "comida", datetime.now())
            "500 super" -> Gasto(500, "super", datetime.now())
            "compr√© 150 nafta" -> Gasto(150, "nafta", datetime.now())
        """
        try:
            self.logger.info(f"üîç DEBUG PROCESAMIENTO: Iniciando an√°lisis del mensaje")
            self.logger.info(f"üìù TEXTO ORIGINAL: '{texto}'")
            self.logger.info(f"üìè LONGITUD: {len(texto)} caracteres")
            
            # Limpiar texto
            texto_limpio = texto.strip()
            self.logger.info(f"üßπ TEXTO LIMPIADO: '{texto_limpio}'")
            
            # Debug detallado de la detecci√≥n de gasto
            es_gasto = self._es_mensaje_gasto(texto_limpio)
            self.logger.info(f"üéØ ¬øES MENSAJE DE GASTO? {es_gasto}")
            
            if not es_gasto:
                self.logger.info("‚ùå RESULTADO: Mensaje NO contiene informaci√≥n de gasto - DESCARTADO")
                return None
            
            # PRIORIDAD 1: Usar motor optimizado (83% m√°s r√°pido)
            self.logger.info("üöÄ EXTRACCI√ìN: Usando motor de regex optimizado")
            datos_extraidos = self.regex_engine.extract_fast(texto_limpio)
            self.logger.info(f"‚ö° RESULTADO REGEX OPTIMIZADO: {datos_extraidos}")
            
            # PRIORIDAD 2: Fallback a m√©todo tradicional solo si es necesario
            if not datos_extraidos:
                self.logger.info("üîÑ FALLBACK: Regex optimizado no encontr√≥ match, usando fallback tradicional")
                datos_extraidos = self._extraer_datos_tradicional(texto_limpio)
                self.logger.info(f"üîÑ RESULTADO FALLBACK: {datos_extraidos}")
            
            if not datos_extraidos:
                self.logger.info("‚ùå EXTRACCI√ìN FALLIDA: No se pudieron extraer datos del mensaje")
                return None
            
            # Procesar descripci√≥n para extraer categor√≠a si no est√° presente
            if 'categoria' not in datos_extraidos:
                descripcion = datos_extraidos.get('descripcion', '')
                categoria_str, descripcion_procesada = self._procesar_descripcion(
                    descripcion, float(datos_extraidos['monto']))
                datos_extraidos['categoria'] = categoria_str
                datos_extraidos['descripcion'] = descripcion_procesada
            
            # Crear objetos de valor
            monto = Monto(datos_extraidos['monto'])
            categoria = Categoria(datos_extraidos['categoria'])
            fecha = fecha_mensaje or datetime.now()
            
            # Crear gasto
            gasto = Gasto(
                monto=monto.valor,
                categoria=categoria.nombre,
                fecha=fecha,
                descripcion=datos_extraidos.get('descripcion')
            )
            
            self.logger.info(f"Gasto extra√≠do exitosamente: {gasto.monto} - {gasto.categoria}")
            return gasto
            
        except Exception as e:
            self.logger.error(f"Error procesando mensaje '{texto}': {str(e)}")
            return None
    
    def _es_mensaje_gasto(self, texto: str) -> bool:
        """
        Determina si un mensaje contiene informaci√≥n de gasto usando detecci√≥n optimizada.
        
        Args:
            texto: Texto del mensaje
            
        Returns:
            True si parece ser un mensaje de gasto, False si no
        """
        self.logger.info(f"üßê AN√ÅLISIS DE GASTO: Verificando si '{texto}' es un mensaje de gasto")
        
        # Detecci√≥n r√°pida de mensajes del sistema primero
        es_sistema = self.regex_engine.is_system_message_fast(texto)
        self.logger.info(f"ü§ñ ¬øES MENSAJE DE SISTEMA? {es_sistema}")
        if es_sistema:
            return False
        
        # Usar el pattern unificado para detecci√≥n r√°pida
        tiene_patron = bool(self.regex_engine.unified_pattern.search(texto))
        self.logger.info(f"üîç ¬øTIENE PATR√ìN DE GASTO? {tiene_patron}")
        
        if tiene_patron:
            # Debug adicional: mostrar qu√© patr√≥n coincidi√≥
            match = self.regex_engine.unified_pattern.search(texto)
            if match:
                self.logger.info(f"‚úÖ PATR√ìN ENCONTRADO: grupos={match.groups()}")
        
        return tiene_patron
    
    def _extraer_datos_tradicional(self, texto: str) -> Optional[Dict[str, Any]]:
        """
        Extrae monto, categor√≠a y descripci√≥n del texto.
        
        Args:
            texto: Texto limpio del mensaje
            
        Returns:
            Dict con datos extra√≠dos o None si no se puede extraer
        """
        # B√∫squeda optimizada: probar patrones en orden de probabilidad
        # Uso search() para mayor flexibilidad y velocidad
        patrones_optimizados = [
            (self.PATRON_SOLO_MONTO, 'search'),    # M√°s com√∫n: "150 nafta"
            (self.PATRON_GASTO, 'search'),         # "gasto: 500 comida"
            (self.PATRON_CON_SIGNO, 'search'),     # "$150 nafta"
            (self.PATRON_COMPRE, 'search'),        # "compre 2500 ropa"
            (self.PATRON_GASTE, 'search'),         # "gast√© 150 en nafta" 
            (self.PATRON_PAGUE, 'search'),         # "pagu√© 500 por comida"
        ]
        
        match = None
        for patron, metodo in patrones_optimizados:
            try:
                match = patron.search(texto)
                if match:
                    break
            except Exception:
                continue  # Continuar con el siguiente patr√≥n
        
        if not match:
            return None
        
        try:
            monto_str = match.group(1)
            descripcion_original = match.group(2).strip()
            
            # Procesar descripci√≥n para extraer categor√≠a
            categoria_str, descripcion_procesada = self._procesar_descripcion(
                descripcion_original, float(monto_str))
            
            # Validar monto
            monto = float(monto_str)
            if monto <= 0:
                self.logger.warning(f"Monto inv√°lido: {monto}")
                return None
            
            return {
                'monto': Decimal(str(monto)),
                'categoria': categoria_str,
                'descripcion': descripcion_procesada
            }
            
        except (ValueError, IndexError) as e:
            self.logger.error(f"Error extrayendo datos: {str(e)}")
            return None
    
    def _procesar_descripcion(self, descripcion: str, monto: float) -> tuple[str, str]:
        """
        Procesa descripci√≥n para extraer categor√≠a usando NLP si est√° disponible.
        
        Args:
            descripcion: Descripci√≥n original del gasto
            monto: Monto del gasto
            
        Returns:
            Tupla (categor√≠a_predicha, descripci√≥n_procesada)
        """
        if not descripcion:
            return 'otros', ''
        
        # Si NLP est√° habilitado, usar categorizaci√≥n autom√°tica (con cach√© si est√° disponible)
        if self.enable_nlp and self.nlp_categorizer:
            try:
                # ‚ö° OPTIMIZACI√ìN: Usar m√©todo cacheado si est√° disponible
                if self.use_cached_nlp and hasattr(self.nlp_categorizer, 'categorize_cached'):
                    resultado = self.nlp_categorizer.categorize_cached(descripcion, monto)
                else:
                    resultado = self.nlp_categorizer.categorize(descripcion, monto)
                
                self.logger.debug(f"NLP categorization: {resultado.categoria_predicha} "
                                f"(confidence: {resultado.confianza:.3f}, method: {resultado.metodo})")
                
                # Si la confianza es alta, usar la categor√≠a predicha
                if resultado.confianza >= 0.5:
                    return resultado.categoria_predicha, descripcion
                else:
                    # Baja confianza, usar categorizaci√≥n tradicional como fallback
                    self.logger.debug(f"Confianza NLP baja ({resultado.confianza:.3f}), usando fallback")
                    
            except Exception as e:
                self.logger.warning(f"Error en categorizaci√≥n NLP: {e}")
        
        # Fallback: usar categorizaci√≥n tradicional por palabra clave
        return self._categorizar_tradicional(descripcion), descripcion
    
    def _categorizar_tradicional(self, descripcion: str) -> str:
        """
        Categorizaci√≥n tradicional basada en palabras clave.
        
        Args:
            descripcion: Descripci√≥n del gasto
            
        Returns:
            Categor√≠a predicha
        """
        descripcion_lower = descripcion.lower()
        
        # Mapeo expandido de palabras clave a categor√≠as
        categorias_tradicionales = {
            # TAKEAWAY - COMIDA LISTA PARA CONSUMIR (restaurant/delivery)
            'takeaway': ['restaurant', 'restaurante', 'almuerzo', 'cena', 'pizza', 'burger', 'delivery', 'desayuno', 'merienda', 'snack', 'hamburguer', 'hamburguesa', 'empanadas', 'asado', 'parrilla', 'sandwich', 'helado', 'postre', 'dulce', 'tacos', 'sushi', 'pasta', 'milanesa', 'ensalada', 'sopa', 'medialunas', 'facturas', 'churros', 'torta', 'pastel', 'galletas', 'chocolate', 'caramelos', 'gaseosa', 'bebida', 'jugo', 'cerveza', 'vino', 'licor', 'whisky', 'vodka', 'gin', 'fernet', 'aperitivo', 'tequila', 'rum', 'pisco', 'champagne', 'sidra', 'bebidas', 'alcohol', 'bar', 'pub', 'boliche', 'confiteria', 'heladeria', 'pizzeria', 'hamburgueseria', 'fast food', 'comida rapida', 'mcdonalds', 'burger king', 'subway', 'kfc', 'taco bell', 'starbucks', 'dunkin', 'mostaza', 'havanna', 'freddo', 'grido', 'bonafide', 'martinez', 'rapanui', 'archies', 'papa johns', 'dominos', 'telepizza', 'pedidos ya', 'rappi', 'glovo', 'uber eats', 'delivery ya', 'ifood', 'cafe', 'cappuccino', 'espresso', 'latte', 'cortado', 'submarino', 'licuado', 'batido', 'smoothie', 'milkshake', 'frappe', 'takeaway', 'take away'],
            'transporte': ['nafta', 'gasolina', 'combustible', 'taxi', 'uber', 'bus', 'bondi', 'colectivo', 'remis', 'metro', 'subte', 'tren', 'peaje', 'estacionamiento', 'parking'],
            'servicios': ['luz', 'agua', 'gas', 'internet', 'telefono', 'ute', 'ose', 'antel', 'cable', 'netflix', 'spotify', 'wifi', 'celular', 'movil', 'tv', 'directv'],
            # COMPRAS DE INGREDIENTES Y PRODUCTOS PARA EL HOGAR
            'supermercado': ['super', 'market', 'tienda', 'almacen', 'supermercado', 'mercado', 'compras', 'abarrotes', 'verduleria', 'carniceria', 'panaderia', 'comida', 'yogurt', 'frutas', 'verduras', 'pan', 'agua', 'cereal', 'leche', 'queso', 'manteca', 'huevos', 'arroz', 'fideos', 'papas', 'batatas', 'tomate', 'cebolla', 'ajo', 'lechuga', 'zanahoria', 'apio', 'perejil', 'oregano', 'condimentos', 'sal', 'azucar', 'harina', 'aceite', 'vinagre', 'miel', 'mermelada', 'dulce de leche', 'nutella', 'mayonesa', 'ketchup', 'mostaza', 'barbacoa', 'chimichurri', 'salsa', 'especias', 'te', 'mate', 'cocido', 'infusion', 'pollo', 'carne', 'pescado'],
            'salud': ['farmacia', 'medicina', 'doctor', 'medico', 'consulta', 'remedios', 'pastillas', 'dentista', 'oculista', 'hospital', 'clinica', 'analisis'],
            'entretenimiento': ['cine', 'bar', 'juego', 'netflix', 'boliche', 'disco', 'teatro', 'concierto', 'show', 'partido', 'futbol', 'cancha', 'gym', 'gimnasio'],
            'ropa': ['ropa', 'pantalon', 'camisa', 'remera', 'zapatos', 'zapatillas', 'vestido', 'pollera', 'jean', 'shorts', 'medias', 'ropa interior', 'campera', 'abrigo', 'sweater'],
            'hogar': ['casa', 'hogar', 'muebles', 'decoracion', 'limpieza', 'detergente', 'jabon', 'shampoo', 'papel higienico', 'toallas', 'sabanas', 'almohadas'],
            'tecnologia': ['celular', 'computadora', 'laptop', 'tablet', 'auriculares', 'cargador', 'cable', 'tecnologia', 'electronico', 'gadget'],
            'educacion': ['libro', 'universidad', 'curso', 'carrera', 'estudio', 'educacion', 'escuela', 'colegio', 'materiales', 'fotocopias'],
        }
        
        # Buscar coincidencias
        for categoria, palabras_clave in categorias_tradicionales.items():
            if any(palabra in descripcion_lower for palabra in palabras_clave):
                return categoria
        
        # Si no hay coincidencias, intentar usar la primera palabra como categor√≠a
        primera_palabra = descripcion.split()[0].lower() if descripcion.split() else ''
        if primera_palabra and len(primera_palabra) > 2:
            return primera_palabra
        
        return 'otros'
    
    def train_nlp_categorizer(self, gastos_entrenamiento) -> bool:
        """
        Entrena el categorizador NLP con datos existentes.
        
        Args:
            gastos_entrenamiento: Lista de gastos para entrenar
            
        Returns:
            True si el entrenamiento fue exitoso
        """
        if not self.enable_nlp or not self.nlp_categorizer:
            self.logger.warning("NLP no est√° habilitado, no se puede entrenar")
            return False
        
        try:
            self.logger.info(f"Entrenando categorizador NLP con {len(gastos_entrenamiento)} gastos...")
            stats = self.nlp_categorizer.ml_categorizer.train_from_gastos(gastos_entrenamiento)
            
            self.logger.info(f"Entrenamiento completado: accuracy={stats.accuracy:.3f}, "
                           f"ejemplos={stats.total_ejemplos}")
            
            return True
            
        except Exception as e:
            self.logger.error(f"Error entrenando categorizador NLP: {e}")
            return False
    
    def get_nlp_info(self) -> Dict[str, Any]:
        """
        Obtiene informaci√≥n sobre el estado del categorizador NLP.
        
        Returns:
            Diccionario con informaci√≥n del NLP
        """
        if not self.enable_nlp:
            return {
                'enabled': False,
                'available': HAS_NLP,
                'reason': 'NLP disabled or dependencies not available'
            }
        
        if self.nlp_categorizer:
            return {
                'enabled': True,
                'available': True,
                **self.nlp_categorizer.get_info()
            }
        
        return {
            'enabled': False,
            'available': HAS_NLP,
            'reason': 'Categorizer not initialized'
        }