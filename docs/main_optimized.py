#!/usr/bin/env python3
"""
Bot Gastos WhatsApp - Versi√≥n Optimizada para Bajo Consumo de RAM
Ejecuta Chrome en modo headless con configuraci√≥n m√≠nima de memoria.
"""

import sys
import signal
import argparse
import gc
from pathlib import Path
from typing import Optional

# Agregar el directorio del proyecto al path
PROJECT_ROOT = Path(__file__).parent
sys.path.insert(0, str(PROJECT_ROOT))

from config.settings import get_settings, StorageMode
from shared.logger import get_logger
from interface.cli.run_bot import BotRunner


def optimize_memory():
    """Optimizaciones de memoria para Python."""
    # Forzar recolecci√≥n de basura
    gc.collect()
    # Configurar GC m√°s agresivo
    gc.set_threshold(700, 10, 10)


def setup_optimized_signal_handlers(bot_runner: Optional['BotRunner'] = None) -> None:
    """Manejadores de se√±ales optimizados para shutdown r√°pido."""
    def signal_handler(signum, frame):
        print("\nüíÄ CTRL+C DETECTADO - SHUTDOWN OPTIMIZADO...")
        
        # Matar Chrome inmediatamente
        try:
            import subprocess
            import platform
            
            if platform.system() == "Windows":
                for process in ['chrome.exe', 'chromedriver.exe']:
                    subprocess.run(['taskkill', '/F', '/IM', process, '/T'], 
                                 capture_output=True, timeout=1)
        except:
            pass
        
        # Stop bot r√°pido
        if bot_runner:
            try:
                bot_runner.stop()
            except:
                pass
        
        # Limpieza de memoria y exit
        optimize_memory()
        print("‚úÖ SHUTDOWN COMPLETO")
        sys.exit(0)
    
    signal.signal(signal.SIGINT, signal_handler)
    if hasattr(signal, 'SIGTERM'):
        signal.signal(signal.SIGTERM, signal_handler)


def main():
    """Punto de entrada optimizado."""
    parser = argparse.ArgumentParser(description="Bot Gastos WhatsApp - Optimizado")
    parser.add_argument("--headless", action="store_true", 
                       help="Forzar modo headless (menos RAM)")
    parser.add_argument("--minimal", action="store_true",
                       help="Configuraci√≥n m√≠nima de memoria")
    
    args = parser.parse_args()
    
    # Configuraci√≥n optimizada
    settings = get_settings()
    
    # Forzar configuraciones de bajo consumo
    if args.headless or args.minimal:
        # Configurar para headless y m√≠nimo consumo
        settings.chrome_headless = True
        settings.storage_mode = StorageMode.SQLITE  # Menos RAM que h√≠brido
        
        # Configuraciones adicionales de bajo consumo
        if hasattr(settings, 'selenium_timeout'):
            settings.selenium_timeout = 5  # Timeouts m√°s cortos
        
        print("üîß MODO OPTIMIZADO ACTIVADO:")
        print("   ‚úÖ Chrome Headless")
        print("   ‚úÖ Storage SQLite (menos RAM)")
        print("   ‚úÖ Timeouts reducidos")
        print("   ‚úÖ Recolecci√≥n de basura agresiva")
    
    # Optimizaciones iniciales de memoria
    optimize_memory()
    
    logger = get_logger(__name__)
    logger.info("üöÄ INICIANDO BOT GASTOS - VERSI√ìN OPTIMIZADA")
    logger.info(f"üíæ Storage mode: {settings.storage_mode}")
    logger.info(f"üåê Chrome headless: {settings.chrome_headless}")
    
    # Crear y configurar el bot runner
    bot_runner = BotRunner(settings=settings)
    
    # Configurar manejadores de se√±ales optimizados
    setup_optimized_signal_handlers(bot_runner)
    
    try:
        print("\n" + "="*50)
        print("ü§ñ BOT GASTOS - MODO OPTIMIZADO")
        print("="*50)
        print("üí° Presiona Ctrl+C para detener")
        print("üìä Logs en logs/bot.log")
        print("üîã Ejecut√°ndose con configuraci√≥n de bajo consumo")
        print("="*50 + "\n")
        
        # Ejecutar el bot
        bot_runner.run()
        
    except KeyboardInterrupt:
        logger.info("üõë Interrupci√≥n manual detectada")
    except Exception as e:
        logger.error(f"‚ùå Error fatal: {e}")
        raise
    finally:
        # Limpieza final
        try:
            bot_runner.stop()
        except:
            pass
        optimize_memory()
        logger.info("‚úÖ Bot terminado correctamente")


if __name__ == "__main__":
    main()